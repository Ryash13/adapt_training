INSERT DOCUMENTS

1)	Insert the following documents into a movies collection. 

    title : Fight Club 
    writer : Chuck Palahniuko 
    year : 1999 
    actors : [ 
    Brad Pitt 
    Edward Norton 
    ] 

    title : Pulp Fiction 
    writer : Quentin Tarantino 
    year : 1994 
    actors : [ 
    John Travolta 
    Uma Thurman 
    ]

    title : Inglorious Basterds 
    writer : Quentin Tarantino 
    year : 2009 
    actors : [ 
    Brad Pitt 
    Diane Kruger 
    Eli Roth 
    ] 

    title : The Hobbit: An Unexpected Journey 
    writer : J.R.R. Tolkein 
    year : 2012 
    franchise : The Hobbit 

    title : The Hobbit: The Desolation of Smaug 
    writer : J.R.R. Tolkein 
    year : 2013 
    franchise : The Hobbit 

    title : The Hobbit: The Battle of the Five Armies 
    writer : J.R.R. Tolkein 
    year : 2012 
    franchise : The Hobbit 
    synopsis : Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness. 

    title : Pee Wee Herman's Big Adventure 

    title : Avatar
     
->	use mongo_practice
->	db.createCollection(“movies”)
->	db.movies.insertMany(
      [
        {
          "title":"Fight Club",
          "writer":"Chuck Palahniuko",
          "year": 1999,
          "actors": ["Brad Pitt","Edward Norton"]
        },

        {
          "title":"Pulp Fiction",
          "writer":"Quentin Tarantino",
          "year": 1994,
          "actors": ["John Travolta","Uma Thurman"]
        },

        {
          "title":"Inglorious Basterds",
          "writer":"Quentin Tarantino",
          "year": 2009,
          "actors": ["Brad Pitt","Edward Norton"]
        },

        {
          "title":"The Hobbit: An Unexpected Journey",
          "writer":"J.R.R. Tolkein",
          "year": 2012,
          "franchise":"The Hobbit"
        },

        {
          "title":"The Hobbit: The Desolation of Smaug",
          "writer":"J.R.R. Tolkein",
          "year": 2013,
          "franchise":"The Hobbit"
        },

        {
          "title":"The Hobbit: The Battle of the Five Armies",
          "writer":"J.R.R. Tolkein",
          "year": 2012,
          "franchise":"The Hobbit",
          "synopsis":"Bilbo and Company are forced to engage in a war against an       array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."
        },

        {
          "title":"Pee Wee Herman's Big Adventure"
        },

        {
          "title":"Avatar"
        }
      ])

QUERY / FIND DOCUMENTS

2)	Query the “movies” collection
    a)	Get all Documents: - 
    ->	db.movies.find().pretty()

    b)	Get all Documents with writer set to “Quentin Tarantino” : -
    ->	 db.movies.find({"writer": "Quentin Tarantino"}).pretty()

    c)	Get all Documents where actors include “Brad Pitt” : - 
    ->	db.movies.find({"actors":{$in:["Brad Pitt"]}}).pretty()

    d)	Get all Documents with franchise set to “The Hobbit” : -
    ->	db.movies.find({"franchise": "The Hobbit"}).pretty()

    e)	Get all movies released in 90’s : -
    ->	db.movies.find({$and:[{"year":{$gte:1990}},{"year":{$lte:1999}}]}).pretty()

    f)	Get all movies released before the Year 2000 or after 2010 : -
    ->	db.movies.find({$or:[{"year":{$lt:2000}},{"year":{$gt:2010}}]}).pretty()


UPDATE DOCUMENTS

1)	Add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."
->	db.movies.update(
    {"title":"The Hobbit:An Unexpected Journey"},
    {$set: {"synopsis":"A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."}
    })
 
2)	Add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring." 
->	db.movies.update(
    {"title":"The Hobbit: The Desolation of Smaug"},
    {$set: {"synopsis":"The dwarves, along Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}
    })

3)	Add an actor named “Samuel L. Jackson” to the movie “Pulp Fiction” : -
->	db.movies.update(
    {“title”:”Pulp Fiction”},
    {$push: {“actors”: “Samuel L. Jackson”}
    })

TEXT SEARCH DOCUMENTS

1)	Find all movies that have a synopsis that contains the world “Bilbo” : -
  •	Create an index to perform the text search “Bilbo” in synopsis field.
->	db.movies.createIndex({synopsis: "text"})
  •	Now perform the search command
->	db.movies.find({$text: {$search: “Bilbo”}}).pretty()

2)	Find all movies that have a synopsis that contains the word “Gandalf”
    •	As we have created the index for synopsis, we don’t require to create that index again
->	db.movies.find({$text: {$search: “Gandalf”}}).pretty()

3)	Find all movies that have a synopsis that contains the word “Bilbo” and not the word “Gandalf”
->	db.movies.find({$text: {$search: “Bilbo -Gandalf”}}).pretty()

4)	Find all movies that have a synopsis that contains the word “dwarves” or “hobbit”
->	db.movies.find({$text: {$search: “dwarves hobbit”}}).pretty()

5)	Find all movies that have a synopsis that contains the word “gold” and “dragon”.
->	db.movies.find({$text: {$search: “gold dragons”}}).pretty()

DELETE DOCUMENTS
1)	Delete the movie “Pee Wee Herman’s Big Adventure”
->	db.movies.remove({title: “Pee Wee Herman’s Big Adventure”})

2)	Delete the movie “Avatar”
->	db.movies.remove({title: “Avatar”})


RELATIONSHIPS
1)	Insert the following documents into a user collection
    username: GoodGuyGreg 
    first_name: "Good Guy" 
    last_name: "Greg"

    username: ScumbagSteve 
    full_name: [ 
    first: "Scumbag" 
    last: "Steve"]

->	db.createCollection(“users”)
->	db.users.insertMany([
    {
        "username": "GoodGuyGreg",
        "first_name": "Good Guy",
        "last_name": "Greg",
        "username": "ScumbagSteve",
        "full_name":"steve",
            "first": "Scumbag",
            "last": "Steve"
    }])

2)	Insert the following documents into a posts collection
    username: GoodGuyGreg 
    title: Passes out at party 
    body: Wakes up early and cleans house 

    username: GoodGuyGreg
    title: Steals your identity
    body: Raises your credit score

    username: GoodGuyGreg
    title: Reports a bug in your code
    body: Sends you a pull request

    username: ScumbagSteve
    title: Borrows something
    body: Sells it

    username: ScumbagSteve
    title: Borrows everything
    body: The end

    username: ScumbagSteve
    title: Forks your repo on github
    body: Sets to private 

->	db.createCollection(“posts”)
->	db.posts.insertMany([
    {
        _id: 1, username:”GoodGuyGreg”,title:”Passes out at party”,
        body:”Wakes up early and cleans house”
    },
    {
        _id:2, username:”GoodGuyGreg”,title:”Steals your identity”,
        body:”Raise your credit score”
    },
    {
        _id: 3, username:”GoodGuyGreg”,title:”Reports a bug in your code”,
        body:”Sends you a Pull Request”
    },
    {
        _id: 4, username:”ScumbagSteve”,title:”Borrows something”,
        body:”Sells it”
    },
    {
         _id: 5, username: ”ScumbagSteve”,title:”Borrows everything”,
        body:”The end”
    },
    {
        _id: 6, username: ”ScumbagSteve”,title:”Fork your repo on github”,
        body:”Sets to private”
    }])


3)	Insert the following documents into a comments collection

a)	username: GoodGuyGreg
    comment: Hope you got a good deal!
    post: [post_obj_id]
    where [post_obj_id] is the ObjectId of the posts document: “Borrows something”

->	db.createCollection(“comments”)
->	db.comments.insert(
    {
    username: ”GoodGuyGreg”,
    comment:”Hope you got a good deal”,
    post: 4
    })

b)	username: GoodGuyGreg 
    comment: What's mine is yours! 
    post: [post_obj_id] 
    where [post_obj_id] is the ObjectId of the posts document: "Borrows everything"
->	db.comments.insert (
    {
    username:”GoodGuyGreg”,
    comment:”What’s mine is yours!”,
    post: 5
    })

c)	username: GoodGuyGreg 
    comment: Don't violate the licensing agreement! 
    post: [post_obj_id] 
    where [post_obj_id] is the ObjectId of the posts document: "Forks your repo on github
->	db.comments.insert (
    {
    username:”GoodGuyGreg”,
    comment:”Don’t violate the licensing agreement”,
    post: 6
    })

d)	username: ScumbagSteve 
    comment: It still isn't clean 
    post: [post_obj_id] 
    where [post_obj_id] is the ObjectId of the posts document: "Passes out at party"
->	db.comments.insert (
    {
    username:”ScumbagSteve”,
    comment:”It still isn’t clean”,
    post: 1
    })

e)	username: ScumbagSteve 
    comment: Denied your PR cause I found a hack 
    post: [post_obj_id] 
    where [post_obj_id] is the ObjectId of the posts document: "Reports a bug in your code"
->	db.comments.insert (
    {
    username:”ScumbagSteve”,
    comment:”Denied your PR cause I found a hack”,
    post: 3
    })

QUERYING RELATED COLLECTIONS
1)	Find all users
->	db.users.find().pretty()

2)	Find all posts
->	db.posts.find().pretty()

3)	Find all posts that was authored by “GoodGuyGreg”
->	db.posts.find({username:”GoodGuyGreg”}).pretty()

4)	Find all posts that was authored by “ScumbagSteve”
->	db.posts.find({username:”ScumbagSteve”}).pretty()

5)	Find all comments
->	db.comments.find().pretty()

6)	Find all comments that was authored by “GoodGuyGreg”
->	db.comments.find({username:”GoodGuyGreg”}).pretty()

7)	Find all comments that was authored by “ScumbagSteve”
->	db.comments.find({username:”ScumbagSteve”}).pretty()

8)	Find all comments belonging to the post “Reports a bug in your code”
->	db.comments.find(
    {post: db.posts.find({title:”Reports a bug in your code”})._id}).pretty()


